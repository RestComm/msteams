{"version":3,"sources":["Apolloclient.js","Views/StaticTabPage/index.js","Views/TeamTabs/index.js","Views/ConfigureTab/graphq.js","Views/ConfigureTab/RegisterNumber.js","Views/ConfigureTab/index.js","Views/AuthPage/index.js","Views/AuthPage/SuccessCallback.js","App.js","serviceWorker.js","index.js"],"names":["Apolloclient","ApolloClient","link","HttpLink","uri","process","credentials","cache","InMemoryCache","PersonalTab","react_default","a","createElement","TeamTab","RegisterMemberGQL","gql","_templateObject","QueryMemberDetailsGQL","_templateObject2","RegisterNumber","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTextChange","e","_e$target","target","name","value","setState","defineProperty","length","state","restcommpstn","_this2","lib","Consumer","context","rem","font","sizes","weights","styles","header","objectSpread","title","semibold","input","paddingTop","width","style","id","autoFocus","placeholder","label","errorLabel","onChange","required","Component","ConfigurationTab","handleSaveSettings","_ref","asyncToGenerator","regenerator_default","mark","_callee","saveEvent","conturl","result","wrap","_context","prev","next","window","location","protocol","host","microsoftTeams","settings","setSettings","contentUrl","entityId","mutate","variables","member","phoneNumber","currentTeam","sent","console","log","notifySuccess","t0","notifyFailure","stop","_x","apply","arguments","setValidityState","teamId","initialize","getContext","ctx","teamName","channelId","channelName","locale","loginHint","registerOnSaveHandler","registerOnRemoveHandler","_this3","react_apollo_browser_umd","query","_ref2","loading","data","error","phone","getMemberById","ConfigureTab_RegisterNumber","graphql","AuthStartPage","queryParams","search","substr","split","forEach","item","s","k","v","decodeURIComponent","authorizationUrl","assign","SuccessOrFailedCallback","match","verCode","params","verificationCode","isfailed","authentication","concat","display","class","App","theme","ThemeStyle","Light","fontSize","pageFontSize","sizeStr","getComputedStyle","document","getElementsByTagName","getPropertyValue","replace","parseInt","updateTheme","themeStr","Dark","HighContrast","getQueryVariable","variable","vars","substring","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","pair","err","return","inTeams","self","top","registerOnThemeChangeHandler","baseFontSize","client","Provider","BrowserRouter","Switch","Route","exact","path","component","StaticTabPage","TeamsTab","AuthPages","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca708015.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nexport default new ApolloClient({\n  link: new HttpLink({\n    uri: process.env.REACT_APP_GRAPHQL,\n    credentials: process.env.REACT_APP_CREDENTIALS,\n  }),\n  cache: new InMemoryCache(),\n});\n","import React from 'react';\n// import { PrimaryButton } from 'msteams-ui-components-react';\n\n// provide information to the customer\nconst PersonalTab = () => {\n  return (\n    <div>\n      <div>\n        TeleSax Demo application allows you to communicate via SMS to your\n        trusted partners. You will need to register a number first on RestComm\n        and configure the same to be used for sending and receiving message. See\n        the configuration page.\n        <br />\n        NOTE: The Restcomm number should support message and voice\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalTab;\n","import React from 'react';\n\nconst TeamTab = () => {\n  return <div>Team Tabs</div>;\n};\n\nexport default TeamTab;\n","import { gql } from 'apollo-boost';\n\nexport const RegisterMemberGQL = gql`\n  mutation registerMember($member: MSTeamRegister) {\n    registerMember(member: $member) {\n      result\n      desc\n    }\n  }\n`;\n\nexport const QueryMemberDetailsGQL = gql`\n  query getMemberById($teamId: String!) {\n    getMemberById(teamId: $teamId) {\n      teamId\n      teamName\n      channelId\n      channelName\n      phoneNumber\n    }\n  }\n`;\n","import React, { Component } from 'react';\n// import styled from 'styled-components';\nimport {\n  Input,\n  TeamsThemeContext,\n  Panel,\n  PanelBody,\n  PanelHeader,\n  PanelFooter,\n} from 'msteams-ui-components-react';\n\nclass RegisterNumber extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restcommpstn: props.value || '',\n    };\n  }\n\n  onTextChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n    // check if the number is more than six\n    if (value.length > 6) {\n      this.props.onTextChange(value);\n    }\n  };\n\n  render() {\n    return (\n      <TeamsThemeContext.Consumer>\n        {(context) => {\n          const { rem, font } = context;\n          const { sizes, weights } = font;\n\n          const styles = {\n            header: { ...sizes.title, ...weights.semibold },\n            input: {\n              paddingTop: rem(0.5),\n              width: '50%',\n            },\n          };\n          return (\n            <Panel>\n              <PanelHeader>\n                <div style={styles.header}>RestComm PTSN Number</div>\n              </PanelHeader>\n              <PanelBody>\n                <Input\n                  name=\"restcommpstn\"\n                  id=\"restcommpstn\"\n                  autoFocus\n                  style={styles.input}\n                  placeholder=\"PTSN Number\"\n                  label=\"Enter the RestComm PTSN Number\"\n                  errorLabel={\n                    !this.state.restcommpstn ? 'This value is required' : null\n                  }\n                  value={this.state.restcommpstn}\n                  onChange={(e) => this.onTextChange(e)}\n                  required\n                />\n              </PanelBody>\n              <PanelFooter />\n            </Panel>\n          );\n        }}\n      </TeamsThemeContext.Consumer>\n    );\n  }\n}\n\nexport default RegisterNumber;\n","import React, { Component } from 'react';\nimport microsoftTeams from '@microsoft/teams-js';\nimport { graphql, Query } from 'react-apollo';\nimport { RegisterMemberGQL, QueryMemberDetailsGQL } from './graphq';\n\nimport RegisterNumber from './RegisterNumber';\n\nclass ConfigurationTab extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phoneNumber: '',\n      teamId: '',\n    };\n  }\n  componentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.getContext((ctx) => {\n      if (ctx) {\n        this.setState({ teamId: ctx.teamId });\n        this.currentTeam = {\n          teamId: ctx.teamId,\n          teamName: ctx.teamName,\n          channelId: ctx.channelId,\n          channelName: ctx.channelName,\n          locale: ctx.locale,\n          loginHint: ctx.loginHint,\n        };\n      }\n    });\n\n    microsoftTeams.settings.registerOnSaveHandler(this.handleSaveSettings);\n  }\n  componentWillUnmount() {\n    microsoftTeams.settings.registerOnRemoveHandler(this.handleSaveSettings);\n  }\n\n  handleSaveSettings = async (saveEvent) => {\n    const conturl = window.location.protocol + '//' + window.location.host;\n    try {\n      microsoftTeams.settings.setSettings({\n        contentUrl: conturl,\n        entityId: conturl,\n      });\n\n      const result = await this.props.mutate({\n        variables: {\n          member: {\n            phoneNumber: this.state.phoneNumber,\n            ...this.currentTeam,\n          },\n        },\n      });\n\n      console.log(result);\n\n      saveEvent.notifySuccess();\n    } catch (error) {\n      saveEvent.notifyFailure();\n      console.log(error);\n    }\n  };\n\n  onTextChange = (value) => {\n    this.setState({ phoneNumber: value });\n    microsoftTeams.settings.setValidityState(true);\n  };\n  render() {\n    return (\n      <Query\n        query={QueryMemberDetailsGQL}\n        variables={{ teamId: this.state.teamId }}\n      >\n        {({ loading, data, error }) => {\n          if (loading) {\n            return <div>Loading....</div>;\n          }\n          if (error) {\n            return <div>Unknown error. Try again</div>;\n          }\n\n          let phone = '';\n          if (data.getMemberById) {\n            phone = data.getMemberById.phoneNumber;\n          }\n          return (\n            <div>\n              <RegisterNumber value={phone} onTextChange={this.onTextChange} />\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default graphql(RegisterMemberGQL)(ConfigurationTab);\n","import React, { Component } from 'react';\nimport microsoftTeams from '@microsoft/teams-js';\n\nclass AuthStartPage extends Component {\n  componentDidMount() {\n    microsoftTeams.initialize();\n    // Parse query parameters\n    let queryParams = {};\n    window.location.search\n      .substr(1)\n      .split('&')\n      .forEach(function(item) {\n        let s = item.split('='),\n          k = s[0],\n          v = s[1] && decodeURIComponent(s[1]);\n        queryParams[k] = v;\n      });\n\n    let authorizationUrl = queryParams['authorizationUrl'];\n    if (authorizationUrl) {\n      window.location.assign(authorizationUrl);\n    }\n  }\n  render() {\n    return <div>Loading...</div>;\n  }\n}\n\nexport default AuthStartPage;\n","import React, { Component } from 'react';\nimport microsoftTeams from '@microsoft/teams-js';\n\nclass SuccessOrFailedCallback extends Component {\n  constructor(props) {\n    super(props);\n    const { match } = props;\n    const verCode = match.params.verificationCode;\n    this.isfailed = match.params.result === 'failed';\n    this.state = {\n      verificationCode: verCode || '',\n    };\n  }\n  componentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.authentication.notifySuccess(\n      `'${this.state.verificationCode}'`,\n    );\n  }\n  render() {\n    if (this.isfailed) {\n      return (\n        <div>\n          There was an error authenticating with Azure Provider. Please try\n          again\n        </div>\n      );\n    }\n    return (\n      <div id=\"instructionText\" style={{ display: 'none' }}>\n        <div class=\"instruction-text\">\n          <p>You're almost there!</p>\n          <span class=\"verification-code\">{this.state.verificationCode}</span>\n          <p>in the Microsoft Teams chat window.</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SuccessOrFailedCallback;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport microsoftTeams from '@microsoft/teams-js';\nimport {\n  TeamsThemeContext,\n  getContext,\n  ThemeStyle,\n} from 'msteams-ui-components-react';\nimport { ApolloProvider } from 'react-apollo';\n\nimport client from './Apolloclient';\nimport StaticTabPage from './Views/StaticTabPage';\nimport TeamsTab from './Views/TeamTabs';\nimport ConfigurationTab from './Views/ConfigureTab';\nimport AuthPages from './Views/AuthPage';\nimport SuccessOrFailedCallback from './Views/AuthPage/SuccessCallback';\n\nclass App extends Component {\n  state = {\n    theme: ThemeStyle.Light,\n    fontSize: 16,\n  };\n  componentDidMount() {\n    this.updateTheme(this.getQueryVariable('theme'));\n    this.setState({\n      fontSize: this.pageFontSize(),\n    });\n\n    // If you are not using the MS Teams web SDK, you can remove this entire if block, otherwise if you want theme\n    // changes in the MS Teams client to propogate to the page, you should leave this here.\n    if (this.inTeams()) {\n      microsoftTeams.initialize();\n      microsoftTeams.registerOnThemeChangeHandler(this.updateTheme);\n    }\n  }\n\n  // Grabs the font size in pixels from the HTML element on your page.\n  pageFontSize = () => {\n    let sizeStr = window\n      .getComputedStyle(document.getElementsByTagName('html')[0])\n      .getPropertyValue('font-size');\n    sizeStr = sizeStr.replace('px', '');\n    let fontSize = parseInt(sizeStr, 10);\n    if (!fontSize) {\n      fontSize = 16;\n    }\n    return fontSize;\n  };\n\n  // Sets the correct theme type from the query string parameter.\n  updateTheme = (themeStr) => {\n    let theme;\n    switch (themeStr) {\n      case 'dark':\n        theme = ThemeStyle.Dark;\n        break;\n      case 'contrast':\n        theme = ThemeStyle.HighContrast;\n        break;\n      case 'default':\n      default:\n        theme = ThemeStyle.Light;\n    }\n    this.setState({ theme });\n  };\n\n  // Returns the value of a query variable.\n  getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (const varPairs of vars) {\n      const pair = varPairs.split('=');\n      if (decodeURIComponent(pair[0]) === variable) {\n        return decodeURIComponent(pair[1]);\n      }\n    }\n    return null;\n  };\n\n  inTeams = () => {\n    try {\n      return window.self !== window.top;\n    } catch (e) {\n      return true;\n    }\n  };\n  render() {\n    const context = getContext({\n      baseFontSize: this.state.fontSize,\n      style: this.state.theme,\n    });\n\n    return (\n      <ApolloProvider client={client}>\n        <TeamsThemeContext.Provider value={context}>\n          <BrowserRouter>\n            <Switch>\n              <Route exact path=\"/personal\" component={StaticTabPage} />\n              <Route path=\"/team\" component={TeamsTab} />\n              <Route path=\"/configure\" component={ConfigurationTab} />\n              <Route path=\"/auth/start\" component={AuthPages} />\n              <Route\n                path=\"/cbresult/:verificationCode/:result\"\n                component={SuccessOrFailedCallback}\n              />\n              <Route path=\"/\" component={StaticTabPage} />\n            </Switch>\n          </BrowserRouter>\n        </TeamsThemeContext.Provider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}