{"version":3,"sources":["Views/PersonalTab/index.js","Views/TeamTabs/index.js","Views/ConfigureTab/index.js","App.js","serviceWorker.js","index.js"],"names":["PersonalTab","react_default","a","createElement","lib","onClick","alert","TeamTab","ConfigurationTab","App","state","theme","ThemeStyle","Light","fontSize","pageFontSize","sizeStr","window","getComputedStyle","document","getElementsByTagName","getPropertyValue","replace","parseInt","updateTheme","themeStr","Dark","HighContrast","_this","setState","getQueryVariable","variable","vars","location","search","substring","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","pair","value","decodeURIComponent","err","return","inTeams","self","top","e","this","microsoftTeams","initialize","registerOnThemeChangeHandler","context","getContext","baseFontSize","style","Provider","BrowserRouter","Switch","Route","exact","path","component","TeamsTab","Component","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAaeA,EAVK,WAClB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAeC,QAAS,kBAAMC,MAAM,qBAApC,eCASC,EAJC,WACd,OAAON,EAAAC,EAAAC,cAAA,yBCGMK,EAJU,WACvB,OAAOP,EAAAC,EAAAC,cAAA,iCCoGMM,6MAzFbC,MAAQ,CACNC,MAAOC,aAAWC,MAClBC,SAAU,MAiBZC,aAAe,WACb,IAAIC,EAAUC,OACXC,iBAAiBC,SAASC,qBAAqB,QAAQ,IACvDC,iBAAiB,aACpBL,EAAUA,EAAQM,QAAQ,KAAM,IAChC,IAAIR,EAAWS,SAASP,EAAS,IAIjC,OAHKF,IACHA,EAAW,IAENA,KAITU,YAAc,SAACC,GACb,IAAId,EACJ,OAAQc,GACN,IAAK,OACHd,EAAQC,aAAWc,KACnB,MACF,IAAK,WACHf,EAAQC,aAAWe,aACnB,MACF,IAAK,UACL,QACEhB,EAAQC,aAAWC,MAEvBe,EAAKC,SAAS,CAAElB,aAIlBmB,iBAAmB,SAACC,GAClB,IACMC,EADQf,OAAOgB,SAASC,OAAOC,UAAU,GAC5BC,MAAM,KAFMC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG/B,QAAAC,EAAAC,EAAuBV,EAAvBW,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA6B,KACrBU,EADqBN,EAAAO,MACLZ,MAAM,KAC5B,GAAIa,mBAAmBF,EAAK,MAAQhB,EAClC,OAAOkB,mBAAmBF,EAAK,KANJ,MAAAG,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAS/B,OAAO,QAGTa,QAAU,WACR,IACE,OAAOnC,OAAOoC,OAASpC,OAAOqC,IAC9B,MAAOC,GACP,OAAO,uFA5DTC,KAAKhC,YAAYgC,KAAK1B,iBAAiB,UACvC0B,KAAK3B,SAAS,CACZf,SAAU0C,KAAKzC,iBAKbyC,KAAKJ,YACPK,IAAeC,aACfD,IAAeE,6BAA6BH,KAAKhC,+CAuDnD,IAAMoC,EAAUC,qBAAW,CACzBC,aAAcN,KAAK9C,MAAMI,SACzBiD,MAAOP,KAAK9C,MAAMC,QAGpB,OACEV,EAAAC,EAAAC,cAACC,EAAA,kBAAkB4D,SAAnB,CAA4BhB,MAAOY,GACjC3D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,KACEjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWtE,IACzCC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWC,IAC/BtE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAW9D,IACpCP,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWtE,cAlFrBwE,aCDEC,QACW,cAA7BxD,OAAOgB,SAASyC,UAEe,UAA7BzD,OAAOgB,SAASyC,UAEhBzD,OAAOgB,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAAS3D,SAAS4D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d882b3d3.chunk.js","sourcesContent":["import React from 'react';\nimport { PrimaryButton } from 'msteams-ui-components-react';\n\nconst PersonalTab = () => {\n  return (\n    <div>\n      <PrimaryButton onClick={() => alert('You clicked me!')}>\n        Click Me!\n      </PrimaryButton>\n    </div>\n  );\n};\n\nexport default PersonalTab;\n","import React from 'react';\n\nconst TeamTab = () => {\n  return <div>Team Tabs</div>;\n};\n\nexport default TeamTab;\n","import React from 'react';\n\nconst ConfigurationTab = () => {\n  return <div>Configuration Tab</div>;\n};\n\nexport default ConfigurationTab;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport microsoftTeams from '@microsoft/teams-js';\nimport {\n  TeamsThemeContext,\n  getContext,\n  ThemeStyle,\n} from 'msteams-ui-components-react';\n\nimport PersonalTab from './Views/PersonalTab';\nimport TeamsTab from './Views/TeamTabs';\nimport ConfigurationTab from './Views/ConfigureTab';\n\nclass App extends Component {\n  state = {\n    theme: ThemeStyle.Light,\n    fontSize: 16,\n  };\n  componentDidMount() {\n    this.updateTheme(this.getQueryVariable('theme'));\n    this.setState({\n      fontSize: this.pageFontSize(),\n    });\n\n    // If you are not using the MS Teams web SDK, you can remove this entire if block, otherwise if you want theme\n    // changes in the MS Teams client to propogate to the page, you should leave this here.\n    if (this.inTeams()) {\n      microsoftTeams.initialize();\n      microsoftTeams.registerOnThemeChangeHandler(this.updateTheme);\n    }\n  }\n\n  // Grabs the font size in pixels from the HTML element on your page.\n  pageFontSize = () => {\n    let sizeStr = window\n      .getComputedStyle(document.getElementsByTagName('html')[0])\n      .getPropertyValue('font-size');\n    sizeStr = sizeStr.replace('px', '');\n    let fontSize = parseInt(sizeStr, 10);\n    if (!fontSize) {\n      fontSize = 16;\n    }\n    return fontSize;\n  };\n\n  // Sets the correct theme type from the query string parameter.\n  updateTheme = (themeStr) => {\n    let theme;\n    switch (themeStr) {\n      case 'dark':\n        theme = ThemeStyle.Dark;\n        break;\n      case 'contrast':\n        theme = ThemeStyle.HighContrast;\n        break;\n      case 'default':\n      default:\n        theme = ThemeStyle.Light;\n    }\n    this.setState({ theme });\n  };\n\n  // Returns the value of a query variable.\n  getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (const varPairs of vars) {\n      const pair = varPairs.split('=');\n      if (decodeURIComponent(pair[0]) === variable) {\n        return decodeURIComponent(pair[1]);\n      }\n    }\n    return null;\n  };\n\n  inTeams = () => {\n    try {\n      return window.self !== window.top;\n    } catch (e) {\n      return true;\n    }\n  };\n  render() {\n    const context = getContext({\n      baseFontSize: this.state.fontSize,\n      style: this.state.theme,\n    });\n\n    return (\n      <TeamsThemeContext.Provider value={context}>\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/personal\" component={PersonalTab} />\n            <Route path=\"/team\" component={TeamsTab} />\n            <Route path=\"/configure\" component={ConfigurationTab} />\n            <Route path=\"/\" component={PersonalTab} />\n          </Switch>\n        </BrowserRouter>\n      </TeamsThemeContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}